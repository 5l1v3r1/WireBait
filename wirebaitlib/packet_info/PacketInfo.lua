---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by markus.
--- DateTime: 2/15/19 11:32 PM
---

local Column = require("wirebaitlib.packet_info.Column");

local PacketInfo = {};

function PacketInfo.new(packet)
    local packet_info = {
        cols = { --[[ c.f. [wireshark pinfo.cols](https://wiki.wireshark.org/LuaAPI/Pinfo) ]]
            __number               = Column.new(),
            __abs_time             = Column.new(),
            __utc_time             = Column.new(),
            __cls_time             = Column.new(),
            __rel_time             = Column.new(),
            __date                 = Column.new(),
            __utc_date             = Column.new(),
            __delta_time           = Column.new(),
            __delta_time_displayed = Column.new(),
            __src                  = Column.new(),
            __src_res              = Column.new(),
            __src_unres            = Column.new(),
            __dl_src               = Column.new(),
            __dl_src_res           = Column.new(),
            __dl_src_unres         = Column.new(),
            __net_src              = Column.new(),
            __net_src_res          = Column.new(),
            __net_src_unres        = Column.new(),
            __dst                  = Column.new(),
            __dst_res              = Column.new(),
            __dst_unres            = Column.new(),
            __dl_dst               = Column.new(),
            __dl_dst_res           = Column.new(),
            __dl_dst_unres         = Column.new(),
            __net_dst              = Column.new(),
            __net_dst_res          = Column.new(),
            __net_dst_unres        = Column.new(),
            __src_port             = Column.new(),
            __src_port_res         = Column.new(),
            __src_port_unres       = Column.new(),
            __dst_port             = Column.new(),
            __dst_port_res         = Column.new(),
            __dst_port_unres       = Column.new(),
            __protocol             = Column.new(),
            __info                 = Column.new(),
            __packet_len           = Column.new(),
            __cumulative_bytes     = Column.new(),
            __direction            = Column.new(),
            __vsan                 = Column.new(),
            __tx_rate              = Column.new(),
            __rssi                 = Column.new(),
            __dce_call             = Column.new()
        },
        treeitems_array = {}
    }

    packet_info.cols.__index = function(self, key, val)
        return rawget(self, "__"..key);
    end

    packet_info.cols.__newindex = function(self, key, val)
        if not self["__"..key] then
            error("Column '" .. key .. "' does not exist!");
        end
        self["__"..key]:set(tostring(val));
    end

    setmetatable(packet_info.cols, packet_info.cols);

    if packet then
        packet_info.cols.src = packet:getSrcIP();
        packet_info.cols.dst = packet:getDstIP();
        packet_info.cols.src_port = packet:getSrcPort();
        packet_info.cols.dst_port = packet:getDstPort();
        packet_info.cols.protocol = packet:protocol();
        packet_info.cols.info = packet_info.cols.src_port .. " â†’ " .. packet_info.cols.dst_port .. "  Len=" .. packet:len();
    else
        --TODO: print error?
    end
    return packet_info;
end

return PacketInfo;